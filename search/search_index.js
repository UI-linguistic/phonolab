var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"PhonoLab Docs","text":"<p>Welcome to the PhonoLab documentation.  </p> <p>PhonoLab is the GitHub repository that powers the Hooked on Phonetics application\u2014a platform for phonetic learning and practice.</p>"},{"location":"backend/api.html","title":"API Reference","text":"<p>This section documents the API endpoints available in the PhonoLab backend.</p>"},{"location":"backend/api.html#lesson-api","title":"Lesson API","text":""},{"location":"backend/api.html#front-end","title":"Front-End","text":"Method Endpoint Description GET <code>/lesson/</code> Get all lessons GET <code>/lesson/&lt;lesson_id&gt;</code> Get a lesson by ID GET <code>/lesson/vowel/&lt;vowel_id&gt;</code> Get a lesson by vowel ID GET <code>/quiz/</code> Get all quiz items GET <code>/quiz/&lt;quiz_id&gt;</code> Get a quiz item by ID GET <code>/quiz/vowel/&lt;vowel_id&gt;</code> Get all quiz items for a specific vowel"},{"location":"backend/api.html#src.api.lesson","title":"<code>lesson</code>","text":""},{"location":"backend/api.html#src.api.lesson.create_all_lessons","title":"<code>create_all_lessons</code>","text":"<p>Create lessons for all vowels that don't have lessons yet.</p> Source code in <code>src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/create-all\", methods=[\"POST\"])\ndef create_all_lessons():\n    \"\"\"Create lessons for all vowels that don't have lessons yet.\"\"\"\n    try:\n        count, error = create_lessons_for_all_vowels()\n\n        if error:\n            return error_response(error, 400)\n\n        return success_response(\n            f\"Created {count} new lessons\",\n            {\"count\": count}\n        )\n    except Exception as e:\n        return error_response(f\"Error creating lessons: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.create_new_lesson","title":"<code>create_new_lesson</code>","text":"<p>Create a new lesson.</p> Source code in <code>src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/\", methods=[\"POST\"])\ndef create_new_lesson():\n    \"\"\"Create a new lesson.\"\"\"\n    try:\n        data = request.get_json()\n        if not data or 'vowel_id' not in data:\n            return error_response(\"Vowel ID is required\", 400)\n\n        vowel_id = data['vowel_id']\n        lesson, error = create_lesson(vowel_id)\n\n        if error:\n            return error_response(error, 400)\n\n        formatted_lesson = format_lesson_http(lesson)\n        return jsonify(formatted_lesson), 201\n    except (ValueError, TypeError) as e:\n        return error_response(f\"Error formatting lesson: {str(e)}\")\n    except Exception as e:\n        return error_response(f\"Error creating lesson: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.delete_existing_lesson","title":"<code>delete_existing_lesson</code>","text":"<p>Delete a lesson.</p> Source code in <code>src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/&lt;int:lesson_id&gt;\", methods=[\"DELETE\"])\ndef delete_existing_lesson(lesson_id):\n    \"\"\"Delete a lesson.\"\"\"\n    try:\n        error = delete_lesson(lesson_id)\n\n        if error:\n            return error_response(error, 400)\n\n        return success_response(\"Lesson deleted successfully\")\n    except Exception as e:\n        return error_response(f\"Error deleting lesson: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.fetch_all_lessons","title":"<code>fetch_all_lessons</code>","text":"<p>Get all lessons.</p> <p>Returns:</p> Name Type Description <code>JSON</code> <p>A list of formatted lesson objects.</p> <p>Errors:     400: Error formatting lessons     500: Unexpected server error</p> Source code in <code>src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/\", methods=[\"GET\"])\ndef fetch_all_lessons():\n    \"\"\"\n    Get all lessons.\n\n    Returns:\n        JSON: A list of formatted lesson objects.\n    Errors:\n        400: Error formatting lessons\n        500: Unexpected server error\n    \"\"\"\n    try:\n        lessons = get_all_lessons()\n        formatted_lessons = format_lessons_http(lessons)\n        return jsonify(formatted_lessons)\n    except (ValueError, TypeError) as e:\n        return error_response(f\"Error formatting lessons: {str(e)}\")\n    except Exception as e:\n        logging.exception(\"Unexpected error in fetch_all_lessons\")\n        return error_response(f\"Unexpected error: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.fetch_lesson_by_id","title":"<code>fetch_lesson_by_id</code>","text":"<p>Get a lesson by ID.</p> Source code in <code>src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/&lt;int:lesson_id&gt;\", methods=[\"GET\"])\ndef fetch_lesson_by_id(lesson_id):\n    \"\"\"Get a lesson by ID.\"\"\"\n    try:\n        lesson = get_lesson_by_id(lesson_id)\n        if not lesson:\n            return error_response(f\"Lesson with ID {lesson_id} not found\", 404)\n\n        formatted_lesson = format_lesson_http(lesson)\n        if not formatted_lesson:\n            return error_response(\"Could not format lesson response\", 500)\n\n        return jsonify(formatted_lesson)\n    except (ValueError, TypeError) as e:\n        return error_response(f\"Error formatting lesson: {str(e)}\")\n    except Exception as e:\n        return error_response(f\"Error retrieving lesson: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.fetch_lesson_by_vowel_id","title":"<code>fetch_lesson_by_vowel_id</code>","text":"<p>Get a lesson by vowel ID.</p> Source code in <code>src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/vowel/&lt;string:vowel_id&gt;\", methods=[\"GET\"])\ndef fetch_lesson_by_vowel_id(vowel_id):\n    \"\"\"Get a lesson by vowel ID.\"\"\"\n    try:\n        lesson = get_lesson_by_vowel_id(vowel_id)\n        if not lesson:\n            return error_response(f\"Lesson for vowel {vowel_id} not found\", 404)\n\n        formatted_lesson = format_lesson_http(lesson)\n        if not formatted_lesson:\n            return error_response(\"Could not format lesson response\", 500)\n\n        return jsonify(formatted_lesson)\n    except (ValueError, TypeError) as e:\n        return error_response(f\"Error formatting lesson: {str(e)}\")\n    except Exception as e:\n        return error_response(f\"Error retrieving lesson: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.update_existing_lesson","title":"<code>update_existing_lesson</code>","text":"<p>Update an existing lesson.</p> Source code in <code>src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/&lt;int:lesson_id&gt;\", methods=[\"PUT\"])\ndef update_existing_lesson(lesson_id):\n    \"\"\"Update an existing lesson.\"\"\"\n    try:\n        data = request.get_json()\n        if not data or 'vowel_id' not in data:\n            return error_response(\"Vowel ID is required\", 400)\n\n        vowel_id = data['vowel_id']\n        lesson, error = update_lesson(lesson_id, vowel_id)\n\n        if error:\n            return error_response(error, 400)\n\n        formatted_lesson = format_lesson_http(lesson)\n        return jsonify(formatted_lesson)\n    except (ValueError, TypeError) as e:\n        return error_response(f\"Error formatting lesson: {str(e)}\")\n    except Exception as e:\n        return error_response(f\"Error updating lesson: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#response-formats","title":"Response Formats","text":""},{"location":"backend/api.html#success-response","title":"Success Response","text":"Success Response Format <pre><code>{\n  \"success\": true,\n  \"message\": \"Operation completed successfully\",\n  \"data\": {\n    // Operation-specific data\n  }\n}\n</code></pre>"},{"location":"backend/api.html#error-response","title":"Error Response","text":"Error Response Format <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Error message describing what went wrong\",\n  \"error\": {\n    \"code\": 404,\n    \"details\": \"Additional error details if available\"\n  }\n}\n</code></pre>"},{"location":"backend/api.html#data","title":"Data","text":"Lesson Object Format <pre><code>{\n  \"id\": 1,\n  \"vowel\": {\n    \"id\": \"v1\",\n    \"phoneme\": \"i\",\n    \"name\": \"Long E\",\n    \"ipa_example\": \"i\u02d0\",\n    \"color_code\": \"#FF5733\",\n    \"audio_url\": \"/audio/vowels/long_e.mp3\",\n    \"description\": \"The long E vowel sound\",\n    \"mouth_image_url\": \"/images/mouth/long_e.png\"\n  },\n  \"lesson_card\": {\n    \"pronounced\": \"as 'ee' in 'see'\",\n    \"common_spellings\": [\"ee\", \"ea\", \"e\", \"ie\", \"ei\"],\n    \"lips\": \"Spread wide\",\n    \"tongue\": \"High and forward in the mouth\",\n    \"example_words\": [\n      {\"word\": \"see\", \"ipa\": \"si\u02d0\"},\n      {\"word\": \"meet\", \"ipa\": \"mi\u02d0t\"},\n      {\"word\": \"piece\", \"ipa\": \"pi\u02d0s\"}\n    ]\n  }\n}\n</code></pre>"},{"location":"backend/api.html#quiz-api","title":"Quiz API","text":""},{"location":"backend/api.html#src.api.quiz","title":"<code>quiz</code>","text":""},{"location":"backend/api.html#src.api.quiz.get_quiz","title":"<code>get_quiz</code>","text":"<p>Retrieves a quiz by its ID.</p> Source code in <code>src/api/quiz.py</code> <pre><code>@quiz_bp.route(\"/&lt;int:quiz_id&gt;\", methods=[\"GET\"])\ndef get_quiz(quiz_id):\n    \"\"\"\n    Retrieves a quiz by its ID.\n    \"\"\"\n    formatted = get_formatted_quiz_by_id(quiz_id)\n    if not formatted:\n        return error_response(\"Quiz not found\", 404)\n    return success_response(\"Quiz retrieved\", {\"quiz\": formatted})\n</code></pre>"},{"location":"backend/api.html#response-formats_1","title":"Response Formats","text":""},{"location":"backend/api.html#success-response_1","title":"Success Response","text":"Success Response Format <pre><code>{\n  \"success\": true,\n  \"message\": \"Operation completed successfully\",\n  \"data\": {\n    // Operation-specific data\n  }\n}\n</code></pre>"},{"location":"backend/api.html#error-response_1","title":"Error Response","text":"Error Response Format <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Error message describing what went wrong\",\n  \"error\": {\n    \"code\": 404,\n    \"details\": \"Additional error details if available\"\n  }\n}\n</code></pre>"},{"location":"backend/api.html#data_1","title":"Data","text":"Quiz Item Object Format <pre><code>{\n  \"id\": 1,\n  \"prompt_word\": \"sheep\",\n  \"prompt_ipa\": \"\u0283i\u02d0p\",\n  \"prompt_audio_url\": \"/audio/quiz/sheep.mp3\",\n  \"feedback_correct\": \"Great job! You identified the correct vowel sound.\",\n  \"feedback_incorrect\": \"Not quite. Listen to the difference again.\",\n  \"options\": [\n    {\n      \"id\": 1,\n      \"word\": \"ship\",\n      \"ipa\": \"\u0283\u026ap\",\n      \"audio_url\": \"/audio/quiz/ship.mp3\",\n      \"is_correct\": false,\n      \"language\": \"en\"\n    },\n    {\n      \"id\": 2,\n      \"word\": \"sheep\",\n      \"ipa\": \"\u0283i\u02d0p\",\n      \"audio_url\": \"/audio/quiz/sheep.mp3\",\n      \"is_correct\": true,\n      \"language\": \"en\"\n    }\n  ]\n}\n</code></pre>"},{"location":"backend/models.html","title":"Models","text":"<p>This section documents the data models used in the PhonoLab backend.</p>"},{"location":"backend/models.html#phoneme-models","title":"Phoneme Models","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel","title":"<code>Vowel</code>","text":"<p>               Bases: <code>Model</code></p> <p>Database model representing a vowel phoneme in the PhonoLab system.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the vowel.</p> <code>phoneme</code> <code>str</code> <p>The IPA symbol for the vowel.</p> <code>name</code> <code>str</code> <p>Human-readable name for the vowel.</p> <code>audio_url</code> <code>str</code> <p>URL to the audio file demonstrating the vowel sound.</p> <p>Relationships:     word_examples: One-to-many relationship with WordExample model.     lesson: One-to-one relationship with Lesson model (via backref).</p> Source code in <code>src/models/phoneme.py</code> <pre><code>class Vowel(db.Model):\n    \"\"\"\n    Database model representing a vowel phoneme in the PhonoLab system.\n\n    Attributes:\n        id (str): Unique identifier for the vowel.\n        phoneme (str): The IPA symbol for the vowel.\n        name (str): Human-readable name for the vowel.\n        audio_url (str): URL to the audio file demonstrating the vowel sound.\n    Relationships:\n        word_examples: One-to-many relationship with WordExample model.\n        lesson: One-to-one relationship with Lesson model (via backref).\n    \"\"\"\n    __tablename__ = \"vowels\"\n\n    id = db.Column(db.String, primary_key=True)\n    phoneme = db.Column(db.String, nullable=False)\n    name = db.Column(db.String, nullable=False)\n    ipa_example = db.Column(db.String, nullable=False)\n    color_code = db.Column(db.String, nullable=False)\n    audio_url = db.Column(db.String, nullable=False)\n    description = db.Column(db.String, nullable=False)\n\n    # New fields from vowel.json\n    pronounced = db.Column(db.String, nullable=True)\n    common_spellings = db.Column(db.JSON, nullable=True)\n    lips = db.Column(db.String, nullable=True)\n    tongue = db.Column(db.String, nullable=True)\n    example_words = db.Column(db.JSON, nullable=True)\n    mouth_image_url = db.Column(db.String, nullable=True)\n\n    word_examples = db.relationship(\n        \"WordExample\",\n        backref=\"vowel\",\n        cascade=\"all, delete-orphan\",\n        lazy=True\n    )\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"phoneme\": self.phoneme,\n            \"name\": self.name,\n            \"ipa_example\": self.ipa_example,\n            \"color_code\": self.color_code,\n            \"audio_url\": self.audio_url,\n            \"description\": self.description,\n            \"pronounced\": self.pronounced,\n            \"common_spellings\": self.common_spellings,\n            \"lips\": self.lips,\n            \"tongue\": self.tongue,\n            \"example_words\": self.example_words,\n            \"mouth_image_url\": self.mouth_image_url,\n            \"word_examples\": [we.to_dict() for we in self.word_examples]\n        }\n\n    def get_lesson_card(self):\n        \"\"\"\n        Return a dictionary with the lesson card information.\n        \"\"\"\n        return {\n            \"pronounced\": self.pronounced,\n            \"common_spellings\": self.common_spellings,\n            \"lips\": self.lips,\n            \"tongue\": self.tongue,\n            \"example_words\": self.example_words\n        }\n\n    def __repr__(self):\n        return f\"&lt;Vowel id={self.id} phoneme='{self.phoneme}' name='{self.name}'&gt;\"\n</code></pre>"},{"location":"backend/models.html#src.models.phoneme.Vowel.get_lesson_card","title":"<code>get_lesson_card</code>","text":"<p>Return a dictionary with the lesson card information.</p> Source code in <code>src/models/phoneme.py</code> <pre><code>def get_lesson_card(self):\n    \"\"\"\n    Return a dictionary with the lesson card information.\n    \"\"\"\n    return {\n        \"pronounced\": self.pronounced,\n        \"common_spellings\": self.common_spellings,\n        \"lips\": self.lips,\n        \"tongue\": self.tongue,\n        \"example_words\": self.example_words\n    }\n</code></pre>"},{"location":"backend/models.html#src.models.phoneme.WordExample","title":"<code>WordExample</code>","text":"<p>               Bases: <code>Model</code></p> <p>Database model representing example words that contain specific vowel sounds.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Unique identifier for the word example.</p> <code>word</code> <code>str</code> <p>The example word containing the target vowel.</p> <code>audio_url</code> <code>str</code> <p>URL to the audio file of the word.</p> <code>ipa</code> <code>str</code> <p>IPA transcription of the word.</p> <code>example_sentence</code> <code>str</code> <p>Example sentence using the word.</p> <code>vowel_id</code> <code>str</code> <p>Foreign key to the associated vowel.</p> Relationships <p>vowel: Many-to-one relationship with the Vowel model.</p> Source code in <code>src/models/phoneme.py</code> <pre><code>class WordExample(db.Model):\n    \"\"\"\n    Database model representing example words that contain specific vowel sounds.\n\n    Attributes:\n        id (int): Unique identifier for the word example.\n        word (str): The example word containing the target vowel.\n        audio_url (str): URL to the audio file of the word.\n        ipa (str): IPA transcription of the word.\n        example_sentence (str): Example sentence using the word.\n        vowel_id (str): Foreign key to the associated vowel.\n\n    Relationships:\n        vowel: Many-to-one relationship with the Vowel model.\n    \"\"\"\n    __tablename__ = \"word_examples\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    word = db.Column(db.String, nullable=False)\n    audio_url = db.Column(db.String, nullable=False)\n    ipa = db.Column(db.String, nullable=True)\n    example_sentence = db.Column(db.String, nullable=True)\n    vowel_id = db.Column(db.String, db.ForeignKey(\"vowels.id\"), nullable=False)\n\n    def to_dict(self):\n        return {\n            \"word\": self.word,\n            \"audio_url\": self.audio_url,\n            \"ipa\": self.ipa,\n            \"example_sentence\": self.example_sentence\n        }\n\n    def __repr__(self):\n        return f\"&lt;WordExample word='{self.word}' vowel_id='{self.vowel_id}'&gt;\"\n</code></pre>"},{"location":"backend/models.html#quiz-models","title":"Quiz Models","text":""},{"location":"backend/models.html#src.models.quiz.QuizItem","title":"<code>QuizItem</code>","text":"<p>               Bases: <code>Model</code></p> <p>Database model representing a quiz question in the PhonoLab system.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Unique identifier for the quiz item.</p> <code>prompt_word</code> <code>str</code> <p>The word presented as the quiz question.</p> <code>prompt_audio_url</code> <code>str</code> <p>URL to the audio file of the prompt word.</p> <code>prompt_ipa</code> <code>str</code> <p>IPA transcription of the prompt word.</p> <code>feedback_correct</code> <code>str</code> <p>Feedback for correct answers.</p> <code>feedback_incorrect</code> <code>str</code> <p>Feedback for incorrect answers.</p> <code>vowel_id</code> <code>str</code> <p>Foreign key to the associated vowel.</p> Relationships <p>vowel: Many-to-one relationship with the Vowel model. options: One-to-many relationship with QuizOption model.</p> Source code in <code>src/models/quiz.py</code> <pre><code>class QuizItem(db.Model):\n    \"\"\"\n    Database model representing a quiz question in the PhonoLab system.\n\n    Attributes:\n        id (int): Unique identifier for the quiz item.\n        prompt_word (str): The word presented as the quiz question.\n        prompt_audio_url (str): URL to the audio file of the prompt word.\n        prompt_ipa (str): IPA transcription of the prompt word.\n        feedback_correct (str): Feedback for correct answers.\n        feedback_incorrect (str): Feedback for incorrect answers.\n        vowel_id (str): Foreign key to the associated vowel.\n\n    Relationships:\n        vowel: Many-to-one relationship with the Vowel model.\n        options: One-to-many relationship with QuizOption model.\n    \"\"\"\n    __tablename__ = \"quiz_items\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    prompt_word = db.Column(db.String, nullable=False)\n    prompt_audio_url = db.Column(db.String, nullable=False)\n    prompt_ipa = db.Column(db.String, nullable=False)\n\n    # NEW FIELDS for feedback messages\n    feedback_correct = db.Column(db.String, nullable=True)\n    feedback_incorrect = db.Column(db.String, nullable=True)\n\n    vowel_id = db.Column(db.String, db.ForeignKey(\"vowels.id\"), nullable=True)\n    vowel = db.relationship(\"Vowel\", backref=\"quizzes\")\n\n    options = db.relationship(\"QuizOption\", backref=\"quiz_item\", cascade=\"all, delete-orphan\", lazy=True)\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"prompt_word\": self.prompt_word,\n            \"prompt_ipa\": self.prompt_ipa,\n            \"prompt_audio_url\": self.prompt_audio_url,\n            \"feedback_correct\": self.feedback_correct,\n            \"feedback_incorrect\": self.feedback_incorrect,\n            \"options\": [opt.to_dict() for opt in self.options],\n        }\n\n    def __repr__(self):\n        return f\"&lt;QuizItem {self.prompt_word} ({self.prompt_ipa})&gt;\"\n</code></pre>"},{"location":"backend/models.html#src.models.quiz.QuizOption","title":"<code>QuizOption</code>","text":"<p>               Bases: <code>Model</code></p> <p>Database model representing an answer option for a quiz question.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Unique identifier for the quiz option.</p> <code>word</code> <code>str</code> <p>The word presented as an answer option.</p> <code>ipa</code> <code>str</code> <p>IPA transcription of the option word.</p> <code>audio_url</code> <code>str</code> <p>URL to the audio file of the option word.</p> <code>is_correct</code> <code>bool</code> <p>Whether this option is the correct answer.</p> <code>language</code> <code>str</code> <p>Language identifier for the word.</p> <code>quiz_item_id</code> <code>int</code> <p>Foreign key to the associated quiz item.</p> Relationships <p>quiz_item: Many-to-one relationship with the QuizItem model.</p> Source code in <code>src/models/quiz.py</code> <pre><code>class QuizOption(db.Model):\n    \"\"\"\n    Database model representing an answer option for a quiz question.\n\n    Attributes:\n        id (int): Unique identifier for the quiz option.\n        word (str): The word presented as an answer option.\n        ipa (str): IPA transcription of the option word.\n        audio_url (str): URL to the audio file of the option word.\n        is_correct (bool): Whether this option is the correct answer.\n        language (str): Language identifier for the word.\n        quiz_item_id (int): Foreign key to the associated quiz item.\n\n    Relationships:\n        quiz_item: Many-to-one relationship with the QuizItem model.\n    \"\"\"\n    __tablename__ = \"quiz_options\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    word = db.Column(db.String, nullable=False)\n    ipa = db.Column(db.String, nullable=False)\n    audio_url = db.Column(db.String, nullable=False)\n    is_correct = db.Column(db.Boolean, default=False)\n    language = db.Column(db.String, nullable=True)\n\n    quiz_item_id = db.Column(db.Integer, db.ForeignKey(\"quiz_items.id\"), nullable=False)\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"word\": self.word,\n            \"ipa\": self.ipa,\n            \"audio_url\": self.audio_url,\n            \"is_correct\": self.is_correct,\n            \"language\": self.language\n        }\n\n    def __repr__(self):\n        return f\"&lt;QuizOption word='{self.word}' ipa='{self.ipa}' lang='{self.language}' correct={self.is_correct}&gt;\"\n</code></pre>"},{"location":"backend/models.html#lesson-model","title":"Lesson Model","text":""},{"location":"backend/models.html#src.models.lesson.Lesson","title":"<code>Lesson</code>","text":"<p>               Bases: <code>Model</code></p> <p>Database model representing a lesson on a specific vowel phoneme.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Unique identifier for the lesson.</p> <code>vowel_id</code> <code>str</code> <p>Foreign key to the associated vowel.</p> Relationships <p>vowel: One-to-one relationship with the Vowel model.</p> Source code in <code>src/models/lesson.py</code> <pre><code>class Lesson(db.Model):\n    \"\"\"\n    Database model representing a lesson on a specific vowel phoneme.\n\n    Attributes:\n        id (int): Unique identifier for the lesson.\n        vowel_id (str): Foreign key to the associated vowel.\n\n    Relationships:\n        vowel: One-to-one relationship with the Vowel model.\n    \"\"\"\n    __tablename__ = \"lessons\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    vowel_id = db.Column(db.String, db.ForeignKey(\"vowels.id\"), nullable=False, unique=True)\n\n    vowel = db.relationship(\"Vowel\", backref=db.backref(\"lesson\", uselist=False, cascade=\"all, delete-orphan\"))\n\n    def to_dict(self):\n        # lesson card\n        lesson_card = {}\n        if self.vowel:\n            lesson_card = {\n                \"pronounced\": self.vowel.pronounced,\n                \"common_spellings\": self.vowel.common_spellings,\n                \"lips\": self.vowel.lips,\n                \"tongue\": self.vowel.tongue,\n                \"example_words\": self.vowel.example_words\n            }\n\n        # filtered vowel\n        vowel_dict = None\n        if self.vowel:\n            vowel_dict = {\n                \"id\": self.vowel.id,\n                \"phoneme\": self.vowel.phoneme,\n                \"name\": self.vowel.name,\n                \"ipa_example\": self.vowel.ipa_example,\n                \"color_code\": self.vowel.color_code,\n                \"audio_url\": self.vowel.audio_url,\n                \"description\": self.vowel.description,\n                \"mouth_image_url\": self.vowel.mouth_image_url,\n                # \"word_examples\": [we.to_dict() for we in self.vowel.word_examples]\n            }\n\n        return {\n            \"id\": self.id,\n            \"vowel\": vowel_dict,\n            \"lesson_card\": lesson_card\n        }\n\n    def __repr__(self):\n        return f\"&lt;Lesson id={self.id} vowel_id={self.vowel_id}&gt;\"\n</code></pre>"},{"location":"backend/overview.html","title":"Backend Overview","text":"<p>The backend follows a layered architecture:</p> <ul> <li>API Layer: Handles HTTP requests and responses  </li> <li>Service Layer: Contains business logic  </li> <li>Data Layer: Interacts with the database  </li> </ul>"},{"location":"backend/overview.html#api-endpoints","title":"API Endpoints","text":"<p>Here are the Flask blueprints that expose our REST endpoints. Use the TOC to navigate to any specific route.</p>"},{"location":"backend/overview.html#src.api.blueprints.all_blueprints","title":"<code>all_blueprints = [lesson_bp, quiz_bp, audio_bp]</code>  <code>module-attribute</code>","text":""},{"location":"backend/overview.html#src.api.blueprints.audio_bp","title":"<code>audio_bp = Blueprint('audio', __name__)</code>  <code>module-attribute</code>","text":""},{"location":"backend/overview.html#src.api.blueprints.lesson_bp","title":"<code>lesson_bp = Blueprint('lesson', __name__, url_prefix='/lesson')</code>  <code>module-attribute</code>","text":""},{"location":"backend/overview.html#src.api.blueprints.quiz_bp","title":"<code>quiz_bp = Blueprint('quiz', __name__, url_prefix='/quiz')</code>  <code>module-attribute</code>","text":""},{"location":"development/setup.html","title":"Development Setup","text":""},{"location":"development/setup.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9+</li> <li>SQLAlchemy</li> </ul>"},{"location":"development/setup.html#backend-setup","title":"Backend Setup","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/UI-linguistic/phonolab.git\ncd phonolab\n</code></pre></p> </li> <li> <p>Work in progress..</p> </li> </ol>"},{"location":"frontend/overview.html","title":"Frontend Overview","text":"<p>The frontend is currently under active development using React.</p>"}]}