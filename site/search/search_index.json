{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"PhonoLab Docs","text":"<p>Welcome to the PhonoLab documentation.  </p> <p>PhonoLab is the GitHub repository that powers the Hooked on Phonetics application\u2014a platform for phonetic learning and practice.</p>"},{"location":"backend/api.html","title":"API Reference","text":"<p>This section documents the API endpoints available in the PhonoLab backend.</p>"},{"location":"backend/api.html#lesson-api","title":"Lesson API","text":""},{"location":"backend/api.html#front-end","title":"Front-End","text":"Method Endpoint Description GET <code>/lesson/</code> Get all lessons GET <code>/lesson/&lt;lesson_id&gt;</code> Get a lesson by ID GET <code>/lesson/vowel/&lt;vowel_id&gt;</code> Get a lesson by vowel ID"},{"location":"backend/api.html#src.api.lesson.lesson_bp","title":"<code>lesson_bp = Blueprint('lesson', __name__, url_prefix='/lesson')</code>  <code>module-attribute</code>","text":""},{"location":"backend/api.html#src.api.lesson.create_all_lessons","title":"<code>create_all_lessons()</code>","text":"<p>Create lessons for all vowels that don't have lessons yet.</p> Source code in <code>backend/src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/create-all\", methods=[\"POST\"])\ndef create_all_lessons():\n    \"\"\"Create lessons for all vowels that don't have lessons yet.\"\"\"\n    try:\n        count, error = create_lessons_for_all_vowels()\n\n        if error:\n            return error_response(error, 400)\n\n        return success_response(\n            f\"Created {count} new lessons\",\n            {\"count\": count}\n        )\n    except Exception as e:\n        return error_response(f\"Error creating lessons: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.create_lesson","title":"<code>create_lesson(vowel_id)</code>","text":"<p>Create a new lesson for a vowel.</p> <p>Parameters:</p> Name Type Description Default <code>vowel_id</code> <code>str</code> <p>ID of the vowel for this lesson</p> required <p>Returns:</p> Type Description <code>Tuple[Optional[Lesson], Optional[str]]</code> <p>Tuple[Optional[Lesson], Optional[str]]: (Created lesson, Error message)</p> Source code in <code>backend/src/services/lesson.py</code> <pre><code>def create_lesson(vowel_id: str) -&gt; Tuple[Optional[Lesson], Optional[str]]:\n    \"\"\"\n    Create a new lesson for a vowel.\n\n    Args:\n        vowel_id (str): ID of the vowel for this lesson\n\n    Returns:\n        Tuple[Optional[Lesson], Optional[str]]: (Created lesson, Error message)\n    \"\"\"\n    try:\n        vowel = Vowel.query.get(vowel_id)\n        if not vowel:\n            return None, f\"Vowel with ID {vowel_id} not found\"\n\n        existing_lesson = Lesson.query.filter_by(vowel_id=vowel_id).first()\n        if existing_lesson:\n            return existing_lesson, None  # Return existing lesson without error\n\n        lesson = Lesson(vowel_id=vowel_id)\n        db.session.add(lesson)\n        db.session.commit()\n        return lesson, None\n\n    except SQLAlchemyError as e:\n        db.session.rollback()\n        return None, f\"Database error: {str(e)}\"\n    except Exception as e:\n        db.session.rollback()\n        return None, f\"Error creating lesson: {str(e)}\"\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.create_lessons_for_all_vowels","title":"<code>create_lessons_for_all_vowels()</code>","text":"<p>Create lessons for all vowels that don't have lessons yet.</p> <p>Returns:</p> Type Description <code>Tuple[int, Optional[str]]</code> <p>Tuple[int, Optional[str]]: (Number of lessons created, Error message)</p> Source code in <code>backend/src/services/lesson.py</code> <pre><code>def create_lessons_for_all_vowels() -&gt; Tuple[int, Optional[str]]:\n    \"\"\"\n    Create lessons for all vowels that don't have lessons yet.\n\n    Returns:\n        Tuple[int, Optional[str]]: (Number of lessons created, Error message)\n    \"\"\"\n    def _create_lessons():\n        # Get all vowels\n        vowels = Vowel.query.all()\n\n        # Count created lessons\n        created_count = 0\n\n        for vowel in vowels:\n            # Check if lesson exists\n            existing_lesson = Lesson.query.filter_by(vowel_id=vowel.id).first()\n            if not existing_lesson:\n                # Create new lesson\n                lesson = Lesson(vowel_id=vowel.id)\n                db.session.add(lesson)\n                created_count += 1\n\n        db.session.commit()\n        return created_count\n\n    return handle_db_operation(_create_lessons, 0)\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.create_new_lesson","title":"<code>create_new_lesson()</code>","text":"<p>Create a new lesson.</p> Source code in <code>backend/src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/\", methods=[\"POST\"])\ndef create_new_lesson():\n    \"\"\"Create a new lesson.\"\"\"\n    try:\n        data = request.get_json()\n        if not data or 'vowel_id' not in data:\n            return error_response(\"Vowel ID is required\", 400)\n\n        vowel_id = data['vowel_id']\n        lesson, error = create_lesson(vowel_id)\n\n        if error:\n            return error_response(error, 400)\n\n        formatted_lesson = format_lesson_http(lesson)\n        return jsonify(formatted_lesson), 201\n    except (ValueError, TypeError) as e:\n        return error_response(f\"Error formatting lesson: {str(e)}\")\n    except Exception as e:\n        return error_response(f\"Error creating lesson: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.delete_existing_lesson","title":"<code>delete_existing_lesson(lesson_id)</code>","text":"<p>Delete a lesson.</p> Source code in <code>backend/src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/&lt;int:lesson_id&gt;\", methods=[\"DELETE\"])\ndef delete_existing_lesson(lesson_id):\n    \"\"\"Delete a lesson.\"\"\"\n    try:\n        error = delete_lesson(lesson_id)\n\n        if error:\n            return error_response(error, 400)\n\n        return success_response(\"Lesson deleted successfully\")\n    except Exception as e:\n        return error_response(f\"Error deleting lesson: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.delete_lesson","title":"<code>delete_lesson(lesson_id)</code>","text":"<p>Delete a lesson by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>lesson_id</code> <code>int</code> <p>ID of the lesson to delete</p> required <p>Returns:</p> Type Description <code>Tuple[bool, Optional[str]]</code> <p>Tuple[bool, Optional[str]]: (Success status, Error message)</p> Source code in <code>backend/src/services/lesson.py</code> <pre><code>def delete_lesson(lesson_id: int) -&gt; Tuple[bool, Optional[str]]:\n    \"\"\"\n    Delete a lesson by its ID.\n\n    Args:\n        lesson_id (int): ID of the lesson to delete\n\n    Returns:\n        Tuple[bool, Optional[str]]: (Success status, Error message)\n    \"\"\"\n    try:\n        lesson = Lesson.query.get(lesson_id)\n        if not lesson:\n            return False, f\"Lesson with ID {lesson_id} not found\"\n\n        db.session.delete(lesson)\n        db.session.commit()\n        return True, None\n\n    except SQLAlchemyError as e:\n        db.session.rollback()\n        return False, f\"Database error: {str(e)}\"\n    except Exception as e:\n        db.session.rollback()\n        return False, f\"Error deleting lesson: {str(e)}\"\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.fetch_all_lessons","title":"<code>fetch_all_lessons()</code>","text":"<p>Get all lessons.</p> Source code in <code>backend/src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/\", methods=[\"GET\"])\ndef fetch_all_lessons():\n    \"\"\"Get all lessons.\"\"\"\n    try:\n        lessons = get_all_lessons()\n        formatted_lessons = format_lessons_http(lessons)\n        return jsonify(formatted_lessons)\n    except (ValueError, TypeError) as e:\n        return error_response(f\"Error formatting lessons: {str(e)}\")\n    except Exception as e:\n        logging.exception(\"Unexpected error in fetch_all_lessons\")\n        return error_response(f\"Unexpected error: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.fetch_lesson_by_id","title":"<code>fetch_lesson_by_id(lesson_id)</code>","text":"<p>Get a lesson by ID.</p> Source code in <code>backend/src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/&lt;int:lesson_id&gt;\", methods=[\"GET\"])\ndef fetch_lesson_by_id(lesson_id):\n    \"\"\"Get a lesson by ID.\"\"\"\n    try:\n        lesson = get_lesson_by_id(lesson_id)\n        if not lesson:\n            return error_response(f\"Lesson with ID {lesson_id} not found\", 404)\n\n        formatted_lesson = format_lesson_http(lesson)\n        if not formatted_lesson:\n            return error_response(\"Could not format lesson response\", 500)\n\n        return jsonify(formatted_lesson)\n    except (ValueError, TypeError) as e:\n        return error_response(f\"Error formatting lesson: {str(e)}\")\n    except Exception as e:\n        return error_response(f\"Error retrieving lesson: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.fetch_lesson_by_vowel_id","title":"<code>fetch_lesson_by_vowel_id(vowel_id)</code>","text":"<p>Get a lesson by vowel ID.</p> Source code in <code>backend/src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/vowel/&lt;string:vowel_id&gt;\", methods=[\"GET\"])\ndef fetch_lesson_by_vowel_id(vowel_id):\n    \"\"\"Get a lesson by vowel ID.\"\"\"\n    try:\n        lesson = get_lesson_by_vowel_id(vowel_id)\n        if not lesson:\n            return error_response(f\"Lesson for vowel {vowel_id} not found\", 404)\n\n        formatted_lesson = format_lesson_http(lesson)\n        if not formatted_lesson:\n            return error_response(\"Could not format lesson response\", 500)\n\n        return jsonify(formatted_lesson)\n    except (ValueError, TypeError) as e:\n        return error_response(f\"Error formatting lesson: {str(e)}\")\n    except Exception as e:\n        return error_response(f\"Error retrieving lesson: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.get_all_lessons","title":"<code>get_all_lessons()</code>","text":"<p>Get all lessons from the database.</p> <p>Returns:</p> Type Description <code>List[Lesson]</code> <p>List[Lesson]: List of all lessons</p> Source code in <code>backend/src/services/lesson.py</code> <pre><code>def get_all_lessons() -&gt; List[Lesson]:\n    \"\"\"\n    Get all lessons from the database.\n\n    Returns:\n        List[Lesson]: List of all lessons\n    \"\"\"\n    return Lesson.query.all()\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.get_lesson_by_id","title":"<code>get_lesson_by_id(lesson_id)</code>","text":"<p>Get a lesson by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>lesson_id</code> <code>int</code> <p>The ID of the lesson to retrieve</p> required <p>Returns:</p> Type Description <code>Optional[Lesson]</code> <p>Optional[Lesson]: The lesson if found, None otherwise</p> Source code in <code>backend/src/services/lesson.py</code> <pre><code>def get_lesson_by_id(lesson_id: int) -&gt; Optional[Lesson]:\n    \"\"\"\n    Get a lesson by its ID.\n\n    Args:\n        lesson_id (int): The ID of the lesson to retrieve\n\n    Returns:\n        Optional[Lesson]: The lesson if found, None otherwise\n    \"\"\"\n    return Lesson.query.get(lesson_id)\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.get_lesson_by_vowel_id","title":"<code>get_lesson_by_vowel_id(vowel_id)</code>","text":"<p>Get a lesson by its associated vowel ID.</p> <p>Parameters:</p> Name Type Description Default <code>vowel_id</code> <code>str</code> <p>The ID of the vowel associated with the lesson</p> required <p>Returns:</p> Type Description <code>Optional[Lesson]</code> <p>Optional[Lesson]: The lesson if found, None otherwise</p> Source code in <code>backend/src/services/lesson.py</code> <pre><code>def get_lesson_by_vowel_id(vowel_id: str) -&gt; Optional[Lesson]:\n    \"\"\"\n    Get a lesson by its associated vowel ID.\n\n    Args:\n        vowel_id (str): The ID of the vowel associated with the lesson\n\n    Returns:\n        Optional[Lesson]: The lesson if found, None otherwise\n    \"\"\"\n    return Lesson.query.filter_by(vowel_id=vowel_id).first()\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.update_existing_lesson","title":"<code>update_existing_lesson(lesson_id)</code>","text":"<p>Update an existing lesson.</p> Source code in <code>backend/src/api/lesson.py</code> <pre><code>@lesson_bp.route(\"/&lt;int:lesson_id&gt;\", methods=[\"PUT\"])\ndef update_existing_lesson(lesson_id):\n    \"\"\"Update an existing lesson.\"\"\"\n    try:\n        data = request.get_json()\n        if not data or 'vowel_id' not in data:\n            return error_response(\"Vowel ID is required\", 400)\n\n        vowel_id = data['vowel_id']\n        lesson, error = update_lesson(lesson_id, vowel_id)\n\n        if error:\n            return error_response(error, 400)\n\n        formatted_lesson = format_lesson_http(lesson)\n        return jsonify(formatted_lesson)\n    except (ValueError, TypeError) as e:\n        return error_response(f\"Error formatting lesson: {str(e)}\")\n    except Exception as e:\n        return error_response(f\"Error updating lesson: {str(e)}\")\n</code></pre>"},{"location":"backend/api.html#src.api.lesson.update_lesson","title":"<code>update_lesson(lesson_id, vowel_id)</code>","text":"<p>Update an existing lesson.</p> <p>Parameters:</p> Name Type Description Default <code>lesson_id</code> <code>int</code> <p>ID of the lesson to update</p> required <code>vowel_id</code> <code>str</code> <p>ID of the vowel for this lesson</p> required <p>Returns:</p> Type Description <code>Tuple[Optional[Lesson], Optional[str]]</code> <p>Tuple[Optional[Lesson], Optional[str]]: (Updated lesson, Error message)</p> Source code in <code>backend/src/services/lesson.py</code> <pre><code>def update_lesson(lesson_id: int, vowel_id: str) -&gt; Tuple[Optional[Lesson], Optional[str]]:\n    \"\"\"\n    Update an existing lesson.\n\n    Args:\n        lesson_id (int): ID of the lesson to update\n        vowel_id (str): ID of the vowel for this lesson\n\n    Returns:\n        Tuple[Optional[Lesson], Optional[str]]: (Updated lesson, Error message)\n    \"\"\"\n    try:\n        lesson = Lesson.query.get(lesson_id)\n        if not lesson:\n            return None, f\"Lesson with ID {lesson_id} not found\"\n\n        vowel = Vowel.query.get(vowel_id)\n        if not vowel:\n            return None, f\"Vowel with ID {vowel_id} not found\"\n\n        # Check if another lesson already uses this vowel\n        existing_lesson = Lesson.query.filter_by(vowel_id=vowel_id).first()\n        if existing_lesson and existing_lesson.id != lesson_id:\n            return None, f\"Another lesson already exists for vowel {vowel_id}\"\n\n        lesson.vowel_id = vowel_id\n        db.session.commit()\n        return lesson, None\n\n    except SQLAlchemyError as e:\n        db.session.rollback()\n        return None, f\"Database error: {str(e)}\"\n    except Exception as e:\n        db.session.rollback()\n        return None, f\"Error updating lesson: {str(e)}\"\n</code></pre>"},{"location":"backend/api.html#quiz-api","title":"Quiz API","text":""},{"location":"backend/api.html#src.api.quiz.quiz_bp","title":"<code>quiz_bp = Blueprint('quiz', __name__, url_prefix='/quiz')</code>  <code>module-attribute</code>","text":""},{"location":"backend/api.html#src.api.quiz.get_formatted_quiz_by_id","title":"<code>get_formatted_quiz_by_id(quiz_id)</code>","text":"<p>Retrieves a quiz type 1 by its ID.</p> Source code in <code>backend/src/services/quiz.py</code> <pre><code>def get_formatted_quiz_by_id(quiz_id) -&gt; QuizItem | None:\n    \"\"\"\n    Retrieves a quiz type 1 by its ID.\n    \"\"\"\n    quiz = get_quiz_by_id(quiz_id)\n    return format_quiz_http(quiz)\n</code></pre>"},{"location":"backend/api.html#src.api.quiz.get_quiz","title":"<code>get_quiz(quiz_id)</code>","text":"<p>Retrieves a quiz by its ID.</p> Source code in <code>backend/src/api/quiz.py</code> <pre><code>@quiz_bp.route(\"/&lt;int:quiz_id&gt;\", methods=[\"GET\"])\ndef get_quiz(quiz_id):\n    \"\"\"\n    Retrieves a quiz by its ID.\n    \"\"\"\n    formatted = get_formatted_quiz_by_id(quiz_id)\n    if not formatted:\n        return error_response(\"Quiz not found\", 404)\n    return success_response(\"Quiz retrieved\", {\"quiz\": formatted})\n</code></pre>"},{"location":"backend/models.html","title":"Models","text":"<p>This section documents the data models used in the PhonoLab backend.</p>"},{"location":"backend/models.html#phoneme-models","title":"Phoneme Models","text":""},{"location":"backend/models.html#vowel","title":"Vowel","text":"<p>               Bases: <code>Model</code></p> Source code in <code>backend/src/models/phoneme.py</code> <pre><code>class Vowel(db.Model):\n    __tablename__ = \"vowels\"\n\n    id = db.Column(db.String, primary_key=True)\n    phoneme = db.Column(db.String, nullable=False)\n    name = db.Column(db.String, nullable=False)\n    ipa_example = db.Column(db.String, nullable=False)\n    color_code = db.Column(db.String, nullable=False)\n    audio_url = db.Column(db.String, nullable=False)\n    description = db.Column(db.String, nullable=False)\n\n    # New fields from vowel.json\n    pronounced = db.Column(db.String, nullable=True)\n    common_spellings = db.Column(db.JSON, nullable=True)\n    lips = db.Column(db.String, nullable=True)\n    tongue = db.Column(db.String, nullable=True)\n    example_words = db.Column(db.JSON, nullable=True)\n    mouth_image_url = db.Column(db.String, nullable=True)\n\n    word_examples = db.relationship(\n        \"WordExample\",\n        backref=\"vowel\",\n        cascade=\"all, delete-orphan\",\n        lazy=True\n    )\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"phoneme\": self.phoneme,\n            \"name\": self.name,\n            \"ipa_example\": self.ipa_example,\n            \"color_code\": self.color_code,\n            \"audio_url\": self.audio_url,\n            \"description\": self.description,\n            \"pronounced\": self.pronounced,\n            \"common_spellings\": self.common_spellings,\n            \"lips\": self.lips,\n            \"tongue\": self.tongue,\n            \"example_words\": self.example_words,\n            \"mouth_image_url\": self.mouth_image_url,\n            \"word_examples\": [we.to_dict() for we in self.word_examples]\n        }\n\n    def get_lesson_card(self):\n        \"\"\"\n        Return a dictionary with the lesson card information.\n        \"\"\"\n        return {\n            \"pronounced\": self.pronounced,\n            \"common_spellings\": self.common_spellings,\n            \"lips\": self.lips,\n            \"tongue\": self.tongue,\n            \"example_words\": self.example_words\n        }\n\n    def __repr__(self):\n        return f\"&lt;Vowel id={self.id} phoneme='{self.phoneme}' name='{self.name}'&gt;\"\n</code></pre>"},{"location":"backend/models.html#src.models.phoneme.Vowel.__tablename__","title":"<code>__tablename__ = 'vowels'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.audio_url","title":"<code>audio_url = db.Column(db.String, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.color_code","title":"<code>color_code = db.Column(db.String, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.common_spellings","title":"<code>common_spellings = db.Column(db.JSON, nullable=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.description","title":"<code>description = db.Column(db.String, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.example_words","title":"<code>example_words = db.Column(db.JSON, nullable=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.id","title":"<code>id = db.Column(db.String, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.ipa_example","title":"<code>ipa_example = db.Column(db.String, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.lips","title":"<code>lips = db.Column(db.String, nullable=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.mouth_image_url","title":"<code>mouth_image_url = db.Column(db.String, nullable=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.name","title":"<code>name = db.Column(db.String, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.phoneme","title":"<code>phoneme = db.Column(db.String, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.pronounced","title":"<code>pronounced = db.Column(db.String, nullable=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.tongue","title":"<code>tongue = db.Column(db.String, nullable=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.word_examples","title":"<code>word_examples = db.relationship('WordExample', backref='vowel', cascade='all, delete-orphan', lazy=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.Vowel.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>backend/src/models/phoneme.py</code> <pre><code>def __repr__(self):\n    return f\"&lt;Vowel id={self.id} phoneme='{self.phoneme}' name='{self.name}'&gt;\"\n</code></pre>"},{"location":"backend/models.html#src.models.phoneme.Vowel.get_lesson_card","title":"<code>get_lesson_card()</code>","text":"<p>Return a dictionary with the lesson card information.</p> Source code in <code>backend/src/models/phoneme.py</code> <pre><code>def get_lesson_card(self):\n    \"\"\"\n    Return a dictionary with the lesson card information.\n    \"\"\"\n    return {\n        \"pronounced\": self.pronounced,\n        \"common_spellings\": self.common_spellings,\n        \"lips\": self.lips,\n        \"tongue\": self.tongue,\n        \"example_words\": self.example_words\n    }\n</code></pre>"},{"location":"backend/models.html#src.models.phoneme.Vowel.to_dict","title":"<code>to_dict()</code>","text":"Source code in <code>backend/src/models/phoneme.py</code> <pre><code>def to_dict(self):\n    return {\n        \"id\": self.id,\n        \"phoneme\": self.phoneme,\n        \"name\": self.name,\n        \"ipa_example\": self.ipa_example,\n        \"color_code\": self.color_code,\n        \"audio_url\": self.audio_url,\n        \"description\": self.description,\n        \"pronounced\": self.pronounced,\n        \"common_spellings\": self.common_spellings,\n        \"lips\": self.lips,\n        \"tongue\": self.tongue,\n        \"example_words\": self.example_words,\n        \"mouth_image_url\": self.mouth_image_url,\n        \"word_examples\": [we.to_dict() for we in self.word_examples]\n    }\n</code></pre>"},{"location":"backend/models.html#wordexample","title":"WordExample","text":"<p>               Bases: <code>Model</code></p> Source code in <code>backend/src/models/phoneme.py</code> <pre><code>class WordExample(db.Model):\n    __tablename__ = \"word_examples\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    word = db.Column(db.String, nullable=False)\n    audio_url = db.Column(db.String, nullable=False)\n    ipa = db.Column(db.String, nullable=True)\n    example_sentence = db.Column(db.String, nullable=True)\n    vowel_id = db.Column(db.String, db.ForeignKey(\"vowels.id\"), nullable=False)\n\n    def to_dict(self):\n        return {\n            \"word\": self.word,\n            \"audio_url\": self.audio_url,\n            \"ipa\": self.ipa,\n            \"example_sentence\": self.example_sentence\n        }\n\n    def __repr__(self):\n        return f\"&lt;WordExample word='{self.word}' vowel_id='{self.vowel_id}'&gt;\"\n</code></pre>"},{"location":"backend/models.html#src.models.phoneme.WordExample.__tablename__","title":"<code>__tablename__ = 'word_examples'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.WordExample.audio_url","title":"<code>audio_url = db.Column(db.String, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.WordExample.example_sentence","title":"<code>example_sentence = db.Column(db.String, nullable=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.WordExample.id","title":"<code>id = db.Column(db.Integer, primary_key=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.WordExample.ipa","title":"<code>ipa = db.Column(db.String, nullable=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.WordExample.vowel_id","title":"<code>vowel_id = db.Column(db.String, db.ForeignKey('vowels.id'), nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.WordExample.word","title":"<code>word = db.Column(db.String, nullable=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"backend/models.html#src.models.phoneme.WordExample.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>backend/src/models/phoneme.py</code> <pre><code>def __repr__(self):\n    return f\"&lt;WordExample word='{self.word}' vowel_id='{self.vowel_id}'&gt;\"\n</code></pre>"},{"location":"backend/models.html#src.models.phoneme.WordExample.to_dict","title":"<code>to_dict()</code>","text":"Source code in <code>backend/src/models/phoneme.py</code> <pre><code>def to_dict(self):\n    return {\n        \"word\": self.word,\n        \"audio_url\": self.audio_url,\n        \"ipa\": self.ipa,\n        \"example_sentence\": self.example_sentence\n    }\n</code></pre>"},{"location":"backend/models.html#quiz-model","title":"Quiz Model","text":""},{"location":"backend/models.html#src.models.quiz.db","title":"<code>db = SQLAlchemy()</code>  <code>module-attribute</code>","text":""},{"location":"backend/models.html#src.models.quiz.QuizItem","title":"<code>QuizItem</code>","text":"<p>               Bases: <code>Model</code></p> Source code in <code>backend/src/models/quiz.py</code> <pre><code>class QuizItem(db.Model):\n    __tablename__ = \"quiz_items\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    prompt_word = db.Column(db.String, nullable=False)\n    prompt_audio_url = db.Column(db.String, nullable=False)\n    prompt_ipa = db.Column(db.String, nullable=False)\n\n    # NEW FIELDS for feedback messages\n    feedback_correct = db.Column(db.String, nullable=True)\n    feedback_incorrect = db.Column(db.String, nullable=True)\n\n    vowel_id = db.Column(db.String, db.ForeignKey(\"vowels.id\"), nullable=True)\n    vowel = db.relationship(\"Vowel\", backref=\"quizzes\")\n\n    options = db.relationship(\"QuizOption\", backref=\"quiz_item\", cascade=\"all, delete-orphan\", lazy=True)\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"prompt_word\": self.prompt_word,\n            \"prompt_ipa\": self.prompt_ipa,\n            \"prompt_audio_url\": self.prompt_audio_url,\n            \"feedback_correct\": self.feedback_correct,\n            \"feedback_incorrect\": self.feedback_incorrect,\n            \"options\": [opt.to_dict() for opt in self.options],\n        }\n\n    def __repr__(self):\n        return f\"&lt;QuizItem {self.prompt_word} ({self.prompt_ipa})&gt;\"\n</code></pre>"},{"location":"backend/models.html#src.models.quiz.QuizOption","title":"<code>QuizOption</code>","text":"<p>               Bases: <code>Model</code></p> Source code in <code>backend/src/models/quiz.py</code> <pre><code>class QuizOption(db.Model):\n    __tablename__ = \"quiz_options\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    word = db.Column(db.String, nullable=False)\n    ipa = db.Column(db.String, nullable=False)\n    audio_url = db.Column(db.String, nullable=False)\n    is_correct = db.Column(db.Boolean, default=False)\n    language = db.Column(db.String, nullable=True)\n\n    quiz_item_id = db.Column(db.Integer, db.ForeignKey(\"quiz_items.id\"), nullable=False)\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"word\": self.word,\n            \"ipa\": self.ipa,\n            \"audio_url\": self.audio_url,\n            \"is_correct\": self.is_correct,\n            \"language\": self.language\n        }\n\n    def __repr__(self):\n        return f\"&lt;QuizOption word='{self.word}' ipa='{self.ipa}' lang='{self.language}' correct={self.is_correct}&gt;\"\n</code></pre>"},{"location":"backend/models.html#lesson-model","title":"Lesson Model","text":""},{"location":"backend/models.html#src.models.lesson.db","title":"<code>db = SQLAlchemy()</code>  <code>module-attribute</code>","text":""},{"location":"backend/models.html#src.models.lesson.Lesson","title":"<code>Lesson</code>","text":"<p>               Bases: <code>Model</code></p> Source code in <code>backend/src/models/lesson.py</code> <pre><code>class Lesson(db.Model):\n    __tablename__ = \"lessons\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    vowel_id = db.Column(db.String, db.ForeignKey(\"vowels.id\"), nullable=False, unique=True)\n\n    vowel = db.relationship(\"Vowel\", backref=db.backref(\"lesson\", uselist=False, cascade=\"all, delete-orphan\"))\n\n    def to_dict(self):\n        # lesson card\n        lesson_card = {}\n        if self.vowel:\n            lesson_card = {\n                \"pronounced\": self.vowel.pronounced,\n                \"common_spellings\": self.vowel.common_spellings,\n                \"lips\": self.vowel.lips,\n                \"tongue\": self.vowel.tongue,\n                \"example_words\": self.vowel.example_words\n            }\n\n        # filtered vowel\n        vowel_dict = None\n        if self.vowel:\n            vowel_dict = {\n                \"id\": self.vowel.id,\n                \"phoneme\": self.vowel.phoneme,\n                \"name\": self.vowel.name,\n                \"ipa_example\": self.vowel.ipa_example,\n                \"color_code\": self.vowel.color_code,\n                \"audio_url\": self.vowel.audio_url,\n                \"description\": self.vowel.description,\n                \"mouth_image_url\": self.vowel.mouth_image_url,\n                # \"word_examples\": [we.to_dict() for we in self.vowel.word_examples]\n            }\n\n        return {\n            \"id\": self.id,\n            \"vowel\": vowel_dict,\n            \"lesson_card\": lesson_card\n        }\n\n    def __repr__(self):\n        return f\"&lt;Lesson id={self.id} vowel_id={self.vowel_id}&gt;\"\n</code></pre>"},{"location":"backend/overview.html","title":"Backend Overview","text":"<p>The backend follows a layered architecture:</p> <ul> <li>API Layer: Handles HTTP requests and responses  </li> <li>Service Layer: Contains business logic  </li> <li>Data Layer: Interacts with the database  </li> </ul>"},{"location":"backend/overview.html#api-endpoints","title":"API Endpoints","text":"<p>Here are the Flask blueprints that expose our REST endpoints. Use the TOC to navigate to any specific route.</p>"},{"location":"backend/overview.html#src.api.blueprints.all_blueprints","title":"<code>all_blueprints = [lesson_bp, quiz_bp, audio_bp]</code>  <code>module-attribute</code>","text":""},{"location":"backend/overview.html#src.api.blueprints.audio_bp","title":"<code>audio_bp = Blueprint('audio', __name__)</code>  <code>module-attribute</code>","text":""},{"location":"backend/overview.html#src.api.blueprints.lesson_bp","title":"<code>lesson_bp = Blueprint('lesson', __name__, url_prefix='/lesson')</code>  <code>module-attribute</code>","text":""},{"location":"backend/overview.html#src.api.blueprints.quiz_bp","title":"<code>quiz_bp = Blueprint('quiz', __name__, url_prefix='/quiz')</code>  <code>module-attribute</code>","text":""},{"location":"development/setup.html","title":"Development Setup","text":""},{"location":"development/setup.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9+</li> <li>SQLAlchemy</li> </ul>"},{"location":"development/setup.html#backend-setup","title":"Backend Setup","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/UI-linguistic/phonolab.git\ncd phonolab\n</code></pre></p> </li> <li> <p>Work in progress..</p> </li> </ol>"},{"location":"frontend/overview.html","title":"Frontend Overview","text":"<p>The frontend is currently under active development using React.</p>"}]}